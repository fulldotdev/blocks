---
import { getCollection, getEntry } from 'astro:content'
import { assign, mapKeys } from 'radash'
import PageLayout from '../layouts/PageLayout.astro'

export async function getStaticPaths() {
  const pages = await getCollection('pages')
  return pages.map((page) => ({
    params: {
      page: page.slug === 'index' ? undefined : page.slug,
    },
    props: page,
  }))
}

const { data, slug, ...rest } = Astro.props
const baseSettings = await getEntry('settings', 'base')
const enSettings = await getEntry('settings', 'en')
const deSettings = await getEntry('settings', 'de')
const frSettings = await getEntry('settings', 'fr')

const pageSettings = data.settings && (await getEntry(data.settings))
const i18nSettings = data.i18n && (await getEntry(data.i18n))

let merged = {}
baseSettings.data && (merged = assign(merged, baseSettings.data))
slug.startsWith('en') && (merged = assign(merged, enSettings?.data ?? {}))
slug.startsWith('de') && (merged = assign(merged, deSettings?.data ?? {}))
slug.startsWith('fr') && (merged = assign(merged, frSettings?.data ?? {}))
pageSettings?.data && (merged = assign(merged, pageSettings.data))
i18nSettings?.data && (merged = assign(merged, i18nSettings.data))
merged = assign(merged, data)

console.log(merged)

const packageLayouts = import.meta.glob('../layouts/**/*.astro')
const userLayouts = import.meta.glob('/src/layouts/**/*.astro')

const mapBlockKeys = (blocks: any) =>
  mapKeys(blocks, (key: any) => key.split('/').pop().split('.').shift())

const components = {
  ...mapBlockKeys(packageLayouts),
  ...mapBlockKeys(userLayouts),
}

const found = components[(data._layout ?? 'PageLayout') as string] as any
const functioncomp = found && (await found())
const Layout = functioncomp?.default ?? PageLayout
---

<Layout
  data={merged}
  {...rest}
/>
